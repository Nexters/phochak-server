//querydsl 추가
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	//querydsl 추가
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
	id 'com.google.cloud.tools.jib' version '3.3.1'
}

group = 'com.nexters'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.5")
	snippetsDir = file('build/generated-snippets')
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

jib {
	from {
		image = "adoptopenjdk/openjdk11"
	}
	to {
		image = "woojin8787/phochak-jib"
		tags = ["latest"]
	}
	container {
		// Set docker image creation time
		creationTime = 'USE_CURRENT_TIMESTAMP'
		// Set JVM options.
		jvmFlags = ['-Dspring.profiles.active=prod', '-XX:+UseContainerSupport', '-Dserver.port=8080', '-Dfile.encoding=UTF-8']
		// Expose different port.
		ports = ['8080']
		extraDirectories {
			paths {
				path {
					from = "${asciidoctor.outputDir}"
					into = "/app/resources/static/docs"
				}
			}
		}
	}
}

tasks.named('jib') {
	dependsOn asciidoctor
}

asciidoctor {
	forkOptions {
		// jvm 옵션. spring rest docs가 sun.nio.ch과 java.io 패키지를 사용하게 할 수 있게끔 설정
		// HTTP 테스트 중에 요청과 응답을 캡쳐하는데, 운영체제와 네트워크 레이어의 io를 획득하기 위해 사용.
		jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
		jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
	}
	dependsOn test
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	sources {
		include("**/index.adoc")
	}
	baseDirFollowsSourceDir() // 특정 .adoc에 다른 adoc 파일을 가져와서 사용하고 싶을 경우 설정
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

build {
	dependsOn copyDocument
}

clean {
	delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성 위치
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'com.nimbusds:nimbus-jose-jwt:9.29'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.238')
	implementation 'com.amazonaws:aws-java-sdk-s3'
	implementation 'com.github.maricn:logback-slack-appender:1.4.0'
	implementation 'com.auth0:java-jwt:4.3.0'
	implementation ('it.ozimov:embedded-redis:0.7.3') { exclude group: "org.slf4j", module: "slf4j-simple" }
	implementation 'com.google.firebase:firebase-admin:9.1.1'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	// java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	// java.lang.NoClassDefFoundError(javax.annotation.Generated) 발생 대응
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
	useJUnitPlatform()
}

//querydsl 추가
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
